import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import DrawingWidget from '../components/DrawingWidget';
import { NetworkingManager } from "./../networking/NetworkingManager";

const mockDrawEndFunction = jest.fn();
const mockOn = jest.fn();
const mockOff = jest.fn();
const mockNetworkingManager = {
    on: mockOn,
    off: mockOff
} as unknown as NetworkingManager;

const mockCanvasContext = {
    beginPath: jest.fn(),
    moveTo: jest.fn(),
    lineTo: jest.fn(),
    stroke: jest.fn(),
    closePath: jest.fn(),
    clearRect: jest.fn(),
    lineCap: '',
    lineJoin: '',
    globalAlpha: 0,
    strokeStyle: '',
    lineWidth: 0,
};

const setupCanvas = () => {
    const { container } = render(<DrawingWidget drawEndFunction={ mockDrawEndFunction } inNetworkingManager={ mockNetworkingManager }/>);
    const canvas = container.querySelector('canvas');

    return { canvas, container };
}

beforeEach(() => {
    HTMLCanvasElement.prototype.getContext = jest.fn().mockReturnValue(mockCanvasContext);

    jest.clearAllMocks();
    localStorage.clear();
});

// NOTE: offsetX and offsetY properties are typically available on MouseEvent objects, which are generated by browser interactions
describe('DrawingWidget Component', () => {
    test('should render correctly with provided props', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();
        expect(canvas).toHaveAttribute('width');
        expect(canvas).toHaveAttribute('height');
    });

    test('should clear canvas and localStorage when drawing starts with mouse', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();
        
        fireEvent.mouseDown(canvas!);
        expect(localStorage.getItem('UserInput')).toBeNull();
    });

    test('should clear canvas and localStorage when drawing starts with touch', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();
        
        fireEvent.touchStart(canvas!, { touches: [{ clientX: 10, clientY: 10 }] });
        expect(localStorage.getItem('UserInput')).toBeNull();
    });

    test('should call drawEndFunction when drawing ends with mouse', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();

        fireEvent.mouseUp(canvas!);
        expect(mockDrawEndFunction).toHaveBeenCalled();
    });

    test('should call drawEndFunction when drawing ends with touch', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();

        fireEvent.touchEnd(canvas!);
        expect(mockDrawEndFunction).toHaveBeenCalled();
    });

    test('should handle complete drawing interaction on canvas with mouse events', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();

        fireEvent.mouseDown(canvas!);
        expect(localStorage.getItem('UserInput')).toBeNull();

        fireEvent.mouseMove(canvas!);
        expect(localStorage.getItem('UserInput')).not.toBeNull();

        fireEvent.mouseUp(canvas!);
        expect(localStorage.getItem('UserInput')).not.toBeNull();
        expect(mockDrawEndFunction).toHaveBeenCalled();
    });

    test('should handle complete drawing interaction on canvas with touch events', () => {
        const { canvas } = setupCanvas();
        expect(canvas).toBeInTheDocument();

        fireEvent.touchStart(canvas!, { touches: [{ clientX: 10, clientY: 10 }] });
        expect(localStorage.getItem('UserInput')).toBeNull();

        fireEvent.touchMove(canvas!, { touches: [{ clientX: 20, clientY: 20 }] });
        expect(localStorage.getItem('UserInput')).toContain('[{\"x\":20,\"y\":20}]');

        fireEvent.touchMove(canvas!, { touches: [{ clientX: 30, clientY: 10 }] });
        expect(localStorage.getItem('UserInput')).toContain('[{\"x\":20,\"y\":20},{\"x\":30,\"y\":10}]');

        fireEvent.touchEnd(canvas!);
        expect(localStorage.getItem('UserInput')).toContain('[{\"x\":20,\"y\":20},{\"x\":30,\"y\":10}]');
        expect(mockDrawEndFunction).toHaveBeenCalled();
    });
})