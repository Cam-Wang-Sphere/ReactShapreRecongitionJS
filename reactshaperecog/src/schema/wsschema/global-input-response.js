"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalInputResponse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var ewsglobal_input_types_js_1 = require("../ewsglobal-input-types.js");
var GlobalInputResponse = /** @class */ (function () {
    function GlobalInputResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GlobalInputResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GlobalInputResponse.getRootAsGlobalInputResponse = function (bb, obj) {
        return (obj || new GlobalInputResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GlobalInputResponse.getSizePrefixedRootAsGlobalInputResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GlobalInputResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GlobalInputResponse.prototype.currentInput = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : ewsglobal_input_types_js_1.EWSGlobalInputTypes.Min;
    };
    GlobalInputResponse.startGlobalInputResponse = function (builder) {
        builder.startObject(1);
    };
    GlobalInputResponse.addCurrentInput = function (builder, currentInput) {
        builder.addFieldInt8(0, currentInput, ewsglobal_input_types_js_1.EWSGlobalInputTypes.Min);
    };
    GlobalInputResponse.endGlobalInputResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GlobalInputResponse.createGlobalInputResponse = function (builder, currentInput) {
        GlobalInputResponse.startGlobalInputResponse(builder);
        GlobalInputResponse.addCurrentInput(builder, currentInput);
        return GlobalInputResponse.endGlobalInputResponse(builder);
    };
    return GlobalInputResponse;
}());
exports.GlobalInputResponse = GlobalInputResponse;
//# sourceMappingURL=global-input-response.js.map