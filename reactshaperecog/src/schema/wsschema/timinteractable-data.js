"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIMInteractableData = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var TIMInteractableData = /** @class */ (function () {
    function TIMInteractableData() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TIMInteractableData.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TIMInteractableData.getRootAsTIMInteractableData = function (bb, obj) {
        return (obj || new TIMInteractableData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMInteractableData.getSizePrefixedRootAsTIMInteractableData = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TIMInteractableData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMInteractableData.prototype.toSession = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TIMInteractableData.prototype.netHandle = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    TIMInteractableData.prototype.tags = function (index, optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    };
    TIMInteractableData.prototype.tagsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TIMInteractableData.prototype.scale = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    TIMInteractableData.startTIMInteractableData = function (builder) {
        builder.startObject(4);
    };
    TIMInteractableData.addToSession = function (builder, toSession) {
        builder.addFieldInt32(0, toSession, 0);
    };
    TIMInteractableData.addNetHandle = function (builder, netHandle) {
        builder.addFieldInt32(1, netHandle, 0);
    };
    TIMInteractableData.addTags = function (builder, tagsOffset) {
        builder.addFieldOffset(2, tagsOffset, 0);
    };
    TIMInteractableData.createTagsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    TIMInteractableData.startTagsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    TIMInteractableData.addScale = function (builder, scale) {
        builder.addFieldFloat32(3, scale, 0.0);
    };
    TIMInteractableData.endTIMInteractableData = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TIMInteractableData.createTIMInteractableData = function (builder, toSession, netHandle, tagsOffset, scale) {
        TIMInteractableData.startTIMInteractableData(builder);
        TIMInteractableData.addToSession(builder, toSession);
        TIMInteractableData.addNetHandle(builder, netHandle);
        TIMInteractableData.addTags(builder, tagsOffset);
        TIMInteractableData.addScale(builder, scale);
        return TIMInteractableData.endTIMInteractableData(builder);
    };
    return TIMInteractableData;
}());
exports.TIMInteractableData = TIMInteractableData;
//# sourceMappingURL=timinteractable-data.js.map