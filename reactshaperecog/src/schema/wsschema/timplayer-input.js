"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIMPlayerInput = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var timinput_event_js_1 = require("../wsschema/timinput-event.js");
var TIMPlayerInput = /** @class */ (function () {
    function TIMPlayerInput() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TIMPlayerInput.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TIMPlayerInput.getRootAsTIMPlayerInput = function (bb, obj) {
        return (obj || new TIMPlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMPlayerInput.getSizePrefixedRootAsTIMPlayerInput = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TIMPlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMPlayerInput.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TIMPlayerInput.prototype.inputEvents = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new timinput_event_js_1.TIMInputEvent()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
    };
    TIMPlayerInput.prototype.inputEventsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TIMPlayerInput.startTIMPlayerInput = function (builder) {
        builder.startObject(2);
    };
    TIMPlayerInput.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    TIMPlayerInput.addInputEvents = function (builder, inputEventsOffset) {
        builder.addFieldOffset(1, inputEventsOffset, 0);
    };
    TIMPlayerInput.startInputEventsVector = function (builder, numElems) {
        builder.startVector(24, numElems, 4);
    };
    TIMPlayerInput.endTIMPlayerInput = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TIMPlayerInput.createTIMPlayerInput = function (builder, sessionId, inputEventsOffset) {
        TIMPlayerInput.startTIMPlayerInput(builder);
        TIMPlayerInput.addSessionId(builder, sessionId);
        TIMPlayerInput.addInputEvents(builder, inputEventsOffset);
        return TIMPlayerInput.endTIMPlayerInput(builder);
    };
    return TIMPlayerInput;
}());
exports.TIMPlayerInput = TIMPlayerInput;
//# sourceMappingURL=timplayer-input.js.map