"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var ebutton_type_enum_js_1 = require("../ebutton-type-enum.js");
var ButtonRequest = /** @class */ (function () {
    function ButtonRequest() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ButtonRequest.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ButtonRequest.getRootAsButtonRequest = function (bb, obj) {
        return (obj || new ButtonRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ButtonRequest.getSizePrefixedRootAsButtonRequest = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ButtonRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ButtonRequest.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ButtonRequest.prototype.buttonInput = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : ebutton_type_enum_js_1.EButtonTypeEnum.None;
    };
    ButtonRequest.startButtonRequest = function (builder) {
        builder.startObject(2);
    };
    ButtonRequest.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    ButtonRequest.addButtonInput = function (builder, buttonInput) {
        builder.addFieldInt8(1, buttonInput, ebutton_type_enum_js_1.EButtonTypeEnum.None);
    };
    ButtonRequest.endButtonRequest = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ButtonRequest.createButtonRequest = function (builder, sessionId, buttonInput) {
        ButtonRequest.startButtonRequest(builder);
        ButtonRequest.addSessionId(builder, sessionId);
        ButtonRequest.addButtonInput(builder, buttonInput);
        return ButtonRequest.endButtonRequest(builder);
    };
    return ButtonRequest;
}());
exports.ButtonRequest = ButtonRequest;
//# sourceMappingURL=button-request.js.map