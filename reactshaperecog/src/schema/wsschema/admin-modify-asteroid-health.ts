// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class AdminModifyAsteroidHealth {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AdminModifyAsteroidHealth {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAdminModifyAsteroidHealth(bb:flatbuffers.ByteBuffer, obj?:AdminModifyAsteroidHealth):AdminModifyAsteroidHealth {
  return (obj || new AdminModifyAsteroidHealth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAdminModifyAsteroidHealth(bb:flatbuffers.ByteBuffer, obj?:AdminModifyAsteroidHealth):AdminModifyAsteroidHealth {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AdminModifyAsteroidHealth()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

healthMod():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startAdminModifyAsteroidHealth(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addHealthMod(builder:flatbuffers.Builder, healthMod:number) {
  builder.addFieldFloat32(1, healthMod, 0.0);
}

static endAdminModifyAsteroidHealth(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAdminModifyAsteroidHealth(builder:flatbuffers.Builder, sessionId:number, healthMod:number):flatbuffers.Offset {
  AdminModifyAsteroidHealth.startAdminModifyAsteroidHealth(builder);
  AdminModifyAsteroidHealth.addSessionId(builder, sessionId);
  AdminModifyAsteroidHealth.addHealthMod(builder, healthMod);
  return AdminModifyAsteroidHealth.endAdminModifyAsteroidHealth(builder);
}
}
