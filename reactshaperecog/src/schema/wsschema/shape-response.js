"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapeResponse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var ShapeResponse = /** @class */ (function () {
    function ShapeResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ShapeResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ShapeResponse.getRootAsShapeResponse = function (bb, obj) {
        return (obj || new ShapeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ShapeResponse.getSizePrefixedRootAsShapeResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ShapeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ShapeResponse.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ShapeResponse.prototype.playerScore = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ShapeResponse.startShapeResponse = function (builder) {
        builder.startObject(2);
    };
    ShapeResponse.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    ShapeResponse.addPlayerScore = function (builder, playerScore) {
        builder.addFieldInt32(1, playerScore, 0);
    };
    ShapeResponse.endShapeResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ShapeResponse.createShapeResponse = function (builder, sessionId, playerScore) {
        ShapeResponse.startShapeResponse(builder);
        ShapeResponse.addSessionId(builder, sessionId);
        ShapeResponse.addPlayerScore(builder, playerScore);
        return ShapeResponse.endShapeResponse(builder);
    };
    return ShapeResponse;
}());
exports.ShapeResponse = ShapeResponse;
//# sourceMappingURL=shape-response.js.map