"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PingServerUnreliableResponse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var PingServerUnreliableResponse = /** @class */ (function () {
    function PingServerUnreliableResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PingServerUnreliableResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PingServerUnreliableResponse.getRootAsPingServerUnreliableResponse = function (bb, obj) {
        return (obj || new PingServerUnreliableResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PingServerUnreliableResponse.getSizePrefixedRootAsPingServerUnreliableResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PingServerUnreliableResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PingServerUnreliableResponse.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PingServerUnreliableResponse.prototype.sent = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    PingServerUnreliableResponse.prototype.sentLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    PingServerUnreliableResponse.prototype.sentArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    PingServerUnreliableResponse.startPingServerUnreliableResponse = function (builder) {
        builder.startObject(2);
    };
    PingServerUnreliableResponse.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    PingServerUnreliableResponse.addSent = function (builder, sentOffset) {
        builder.addFieldOffset(1, sentOffset, 0);
    };
    PingServerUnreliableResponse.createSentVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    PingServerUnreliableResponse.startSentVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    PingServerUnreliableResponse.endPingServerUnreliableResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PingServerUnreliableResponse.createPingServerUnreliableResponse = function (builder, sessionId, sentOffset) {
        PingServerUnreliableResponse.startPingServerUnreliableResponse(builder);
        PingServerUnreliableResponse.addSessionId(builder, sessionId);
        PingServerUnreliableResponse.addSent(builder, sentOffset);
        return PingServerUnreliableResponse.endPingServerUnreliableResponse(builder);
    };
    return PingServerUnreliableResponse;
}());
exports.PingServerUnreliableResponse = PingServerUnreliableResponse;
//# sourceMappingURL=ping-server-unreliable-response.js.map