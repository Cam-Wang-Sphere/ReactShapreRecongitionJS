"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIMPlayerInputInteractable = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var timinput_interactable_js_1 = require("../wsschema/timinput-interactable.js");
var TIMPlayerInputInteractable = /** @class */ (function () {
    function TIMPlayerInputInteractable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TIMPlayerInputInteractable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TIMPlayerInputInteractable.getRootAsTIMPlayerInputInteractable = function (bb, obj) {
        return (obj || new TIMPlayerInputInteractable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMPlayerInputInteractable.getSizePrefixedRootAsTIMPlayerInputInteractable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TIMPlayerInputInteractable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TIMPlayerInputInteractable.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TIMPlayerInputInteractable.prototype.inputEvents = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new timinput_interactable_js_1.TIMInputInteractable()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    TIMPlayerInputInteractable.prototype.inputEventsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TIMPlayerInputInteractable.startTIMPlayerInputInteractable = function (builder) {
        builder.startObject(2);
    };
    TIMPlayerInputInteractable.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    TIMPlayerInputInteractable.addInputEvents = function (builder, inputEventsOffset) {
        builder.addFieldOffset(1, inputEventsOffset, 0);
    };
    TIMPlayerInputInteractable.createInputEventsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    TIMPlayerInputInteractable.startInputEventsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    TIMPlayerInputInteractable.endTIMPlayerInputInteractable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TIMPlayerInputInteractable.createTIMPlayerInputInteractable = function (builder, sessionId, inputEventsOffset) {
        TIMPlayerInputInteractable.startTIMPlayerInputInteractable(builder);
        TIMPlayerInputInteractable.addSessionId(builder, sessionId);
        TIMPlayerInputInteractable.addInputEvents(builder, inputEventsOffset);
        return TIMPlayerInputInteractable.endTIMPlayerInputInteractable(builder);
    };
    return TIMPlayerInputInteractable;
}());
exports.TIMPlayerInputInteractable = TIMPlayerInputInteractable;
//# sourceMappingURL=timplayer-input-interactable.js.map