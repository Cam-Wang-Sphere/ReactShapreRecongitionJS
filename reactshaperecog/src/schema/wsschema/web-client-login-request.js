"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebClientLoginRequest = void 0;
var flatbuffers = require("flatbuffers");
var WebClientLoginRequest = /** @class */ (function () {
    function WebClientLoginRequest() {
        this.bb = null;
        this.bb_pos = 0;
    }
    WebClientLoginRequest.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    WebClientLoginRequest.getRootAsWebClientLoginRequest = function (bb, obj) {
        return (obj || new WebClientLoginRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WebClientLoginRequest.getSizePrefixedRootAsWebClientLoginRequest = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WebClientLoginRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WebClientLoginRequest.prototype.repeaterSessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WebClientLoginRequest.prototype.pendingId = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WebClientLoginRequest.startWebClientLoginRequest = function (builder) {
        builder.startObject(2);
    };
    WebClientLoginRequest.addRepeaterSessionId = function (builder, repeaterSessionId) {
        builder.addFieldInt32(0, repeaterSessionId, 0);
    };
    WebClientLoginRequest.addPendingId = function (builder, pendingId) {
        builder.addFieldInt32(1, pendingId, 0);
    };
    WebClientLoginRequest.endWebClientLoginRequest = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    WebClientLoginRequest.createWebClientLoginRequest = function (builder, repeaterSessionId, pendingId) {
        WebClientLoginRequest.startWebClientLoginRequest(builder);
        WebClientLoginRequest.addRepeaterSessionId(builder, repeaterSessionId);
        WebClientLoginRequest.addPendingId(builder, pendingId);
        return WebClientLoginRequest.endWebClientLoginRequest(builder);
    };
    return WebClientLoginRequest;
}());
exports.WebClientLoginRequest = WebClientLoginRequest;
//# sourceMappingURL=web-client-login-request.js.map