// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TIMInputEvent } from '../wsschema/timinput-event.js';


export class TIMPlayerInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TIMPlayerInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTIMPlayerInput(bb:flatbuffers.ByteBuffer, obj?:TIMPlayerInput):TIMPlayerInput {
  return (obj || new TIMPlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTIMPlayerInput(bb:flatbuffers.ByteBuffer, obj?:TIMPlayerInput):TIMPlayerInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TIMPlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

inputEvents(index: number, obj?:TIMInputEvent):TIMInputEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TIMInputEvent()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;
}

inputEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTIMPlayerInput(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addInputEvents(builder:flatbuffers.Builder, inputEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, inputEventsOffset, 0);
}

static startInputEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(24, numElems, 4);
}

static endTIMPlayerInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTIMPlayerInput(builder:flatbuffers.Builder, sessionId:number, inputEventsOffset:flatbuffers.Offset):flatbuffers.Offset {
  TIMPlayerInput.startTIMPlayerInput(builder);
  TIMPlayerInput.addSessionId(builder, sessionId);
  TIMPlayerInput.addInputEvents(builder, inputEventsOffset);
  return TIMPlayerInput.endTIMPlayerInput(builder);
}
}
