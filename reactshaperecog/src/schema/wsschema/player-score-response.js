"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerScoreResponse = void 0;
var flatbuffers = require("flatbuffers");
var PlayerScoreResponse = /** @class */ (function () {
    function PlayerScoreResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PlayerScoreResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PlayerScoreResponse.getRootAsPlayerScoreResponse = function (bb, obj) {
        return (obj || new PlayerScoreResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerScoreResponse.getSizePrefixedRootAsPlayerScoreResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerScoreResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PlayerScoreResponse.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PlayerScoreResponse.prototype.newScore = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    PlayerScoreResponse.startPlayerScoreResponse = function (builder) {
        builder.startObject(2);
    };
    PlayerScoreResponse.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    PlayerScoreResponse.addNewScore = function (builder, newScore) {
        builder.addFieldFloat32(1, newScore, 0.0);
    };
    PlayerScoreResponse.endPlayerScoreResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PlayerScoreResponse.createPlayerScoreResponse = function (builder, sessionId, newScore) {
        PlayerScoreResponse.startPlayerScoreResponse(builder);
        PlayerScoreResponse.addSessionId(builder, sessionId);
        PlayerScoreResponse.addNewScore(builder, newScore);
        return PlayerScoreResponse.endPlayerScoreResponse(builder);
    };
    return PlayerScoreResponse;
}());
exports.PlayerScoreResponse = PlayerScoreResponse;
//# sourceMappingURL=player-score-response.js.map