// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TIMInteractableData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TIMInteractableData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTIMInteractableData(bb:flatbuffers.ByteBuffer, obj?:TIMInteractableData):TIMInteractableData {
  return (obj || new TIMInteractableData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTIMInteractableData(bb:flatbuffers.ByteBuffer, obj?:TIMInteractableData):TIMInteractableData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TIMInteractableData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

netHandle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scale():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startTIMInteractableData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addNetHandle(builder:flatbuffers.Builder, netHandle:number) {
  builder.addFieldInt32(1, netHandle, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScale(builder:flatbuffers.Builder, scale:number) {
  builder.addFieldFloat32(3, scale, 0.0);
}

static endTIMInteractableData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTIMInteractableData(builder:flatbuffers.Builder, sessionId:number, netHandle:number, tagsOffset:flatbuffers.Offset, scale:number):flatbuffers.Offset {
  TIMInteractableData.startTIMInteractableData(builder);
  TIMInteractableData.addSessionId(builder, sessionId);
  TIMInteractableData.addNetHandle(builder, netHandle);
  TIMInteractableData.addTags(builder, tagsOffset);
  TIMInteractableData.addScale(builder, scale);
  return TIMInteractableData.endTIMInteractableData(builder);
}
}
