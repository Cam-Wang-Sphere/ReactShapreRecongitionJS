"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericBinaryWrapper = void 0;
var flatbuffers = require("flatbuffers");
var GenericBinaryWrapper = /** @class */ (function () {
    function GenericBinaryWrapper() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GenericBinaryWrapper.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GenericBinaryWrapper.getRootAsGenericBinaryWrapper = function (bb, obj) {
        return (obj || new GenericBinaryWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GenericBinaryWrapper.getSizePrefixedRootAsGenericBinaryWrapper = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GenericBinaryWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GenericBinaryWrapper.prototype.data = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    GenericBinaryWrapper.prototype.dataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GenericBinaryWrapper.prototype.dataArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    GenericBinaryWrapper.startGenericBinaryWrapper = function (builder) {
        builder.startObject(1);
    };
    GenericBinaryWrapper.addData = function (builder, dataOffset) {
        builder.addFieldOffset(0, dataOffset, 0);
    };
    GenericBinaryWrapper.createDataVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    GenericBinaryWrapper.startDataVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    GenericBinaryWrapper.endGenericBinaryWrapper = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GenericBinaryWrapper.createGenericBinaryWrapper = function (builder, dataOffset) {
        GenericBinaryWrapper.startGenericBinaryWrapper(builder);
        GenericBinaryWrapper.addData(builder, dataOffset);
        return GenericBinaryWrapper.endGenericBinaryWrapper(builder);
    };
    return GenericBinaryWrapper;
}());
exports.GenericBinaryWrapper = GenericBinaryWrapper;
//# sourceMappingURL=generic-binary-wrapper.js.map