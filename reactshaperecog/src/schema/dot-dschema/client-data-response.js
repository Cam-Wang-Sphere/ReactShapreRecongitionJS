"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientDataResponse = void 0;
var flatbuffers = require("flatbuffers");
var ClientDataResponse = /** @class */ (function () {
    function ClientDataResponse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ClientDataResponse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ClientDataResponse.getRootAsClientDataResponse = function (bb, obj) {
        return (obj || new ClientDataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ClientDataResponse.getSizePrefixedRootAsClientDataResponse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ClientDataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ClientDataResponse.prototype.sessionId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ClientDataResponse.prototype.stringData = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    ClientDataResponse.startClientDataResponse = function (builder) {
        builder.startObject(2);
    };
    ClientDataResponse.addSessionId = function (builder, sessionId) {
        builder.addFieldInt32(0, sessionId, 0);
    };
    ClientDataResponse.addStringData = function (builder, stringDataOffset) {
        builder.addFieldOffset(1, stringDataOffset, 0);
    };
    ClientDataResponse.endClientDataResponse = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ClientDataResponse.createClientDataResponse = function (builder, sessionId, stringDataOffset) {
        ClientDataResponse.startClientDataResponse(builder);
        ClientDataResponse.addSessionId(builder, sessionId);
        ClientDataResponse.addStringData(builder, stringDataOffset);
        return ClientDataResponse.endClientDataResponse(builder);
    };
    return ClientDataResponse;
}());
exports.ClientDataResponse = ClientDataResponse;
//# sourceMappingURL=client-data-response.js.map