// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ClientDataResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientDataResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientDataResponse(bb:flatbuffers.ByteBuffer, obj?:ClientDataResponse):ClientDataResponse {
  return (obj || new ClientDataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientDataResponse(bb:flatbuffers.ByteBuffer, obj?:ClientDataResponse):ClientDataResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientDataResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

stringData():string|null
stringData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stringData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startClientDataResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addStringData(builder:flatbuffers.Builder, stringDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stringDataOffset, 0);
}

static endClientDataResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClientDataResponse(builder:flatbuffers.Builder, sessionId:number, stringDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  ClientDataResponse.startClientDataResponse(builder);
  ClientDataResponse.addSessionId(builder, sessionId);
  ClientDataResponse.addStringData(builder, stringDataOffset);
  return ClientDataResponse.endClientDataResponse(builder);
}
}
